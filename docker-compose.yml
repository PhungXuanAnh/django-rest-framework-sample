version: '3.8'

x-default: &default
  env_file:
    - env_file
  logging:
    driver: "json-file"
    options:
      max-size: "100M"
      max-file: "3"
  networks:
    - internal-network


services:
  sample-backend:
    <<: *default
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./source/logs:/app/logs
    container_name: sample-backend
    ports:
      - 8027:8027
    depends_on:
      - postgres
      - redis
      - rabbitmq

  celery-worker:
    <<: *default
    image: celery-worker:latest
    build: 
      context: .
      dockerfile: Dockerfile
    command:
      - celery 
      - --app=main.celery_app 
      - worker 
      - -Q=queue-high,queue-medium,queue-low 
      - -Ofair
      - --pool=solo # TODO: nghien cuu xem tai sao pool la solo lai chay duoc con eventlet lai khong chay duoc task ben trong app coordinate
      - --concurrency=10 
      - --loglevel=info 
      - -f /app/logs/celery-worker.log 
      - -n worker1@%h
    volumes:
      - ./source:/app
      - ./source/logs:/app/logs
    container_name: sample-celery-worker
    depends_on:
      - postgres
      - redis
      - rabbitmq

  celery-beat:
    <<: *default
    image: celery-beat:latest
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./source:/app
      - ./source/logs:/app/logs
    container_name: sample-celery-beat
    command:
      celery --app=main.celery_app beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --loglevel=info -f /app/logs/celery-beat.log 
    depends_on:
      - redis
      - rabbitmq
      - postgres
      - sample-backend  # django-celery-beat package need to wait backend service run migrations before 
                    # start for create tables of this package

  # celery-flower:
  #   <<: *default
  #   image: celery-flower:latest
  #   build: 
  #     context: .
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./source:/app
  #     - ./source/logs:/app/logs
  #   container_name: sample-celery-flower
  #   ports:
  #     - 5555:5555
  #   depends_on:
  #     - postgres
  #   command:
  #     celery --app=main.celery_app flower --basic_auth=admin:password123 --address=0.0.0.0 --port=5555

  redis:
    <<: *default
    image: bitnami/redis:5.0
    container_name: sample-redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    # - REDIS_PASSWORD=5Zu7fA8r5eaO
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data/
    hostname: redis

  rabbitmq:
    <<: *default
    image: rabbitmq:3.9.13-management
    container_name: sample-rabbitmq
    ports:
      - "5672:5672"  # port for provider ans consumer
      - "15672:15672" # port for accessing on web
    hostname: rabbitmq

  postgres:
    <<: *default
    image: postgres:10
    container_name: sample-postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    logging:
        driver: "json-file"
        options:
            max-size: "100M"
            max-file: "3"


  frontend:
    <<: *default
    image: web:1.1.1
    build:
      context: ./react-googlemaps
      dockerfile: Dockerfile
    container_name: sample-frontend
    ports:
        - 3000:3000

  nginx:
    <<: *default
    image: nginx:1.13
    container_name: sample-nginx
    depends_on:
        - sample-backend
    ports:
        - 80:80
        - 443:443
    volumes:
        - ./nginx/conf.d:/etc/nginx/conf.d:ro
        - ./certbot/conf:/etc/nginx/ssl
        - ./certbot/well-known:/var/www/certbot/.well-known
    command: /bin/bash -c "nginx -g 'daemon off;'"

  certbot:
    container_name: sample-certbot
    image: certbot/certbot:latest
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
      - ./certbot/well-known:/var/www/certbot/.well-known
    # command:
    #   - certonly
    #   - --webroot
    #   - --webroot-path=/var/www/certbot/.well-known
    #   - --email
    #   - test@gmail.com
    #   - --agree-tos
    #   - --no-eff-email
    #   - -d
    #   -  xuananh-drf-test.com
      # - -d
      # - www.xuananh-drf-test.com
    entrypoint: sh -c
    command:
      - while true; do echo "this is test command"; sleep 1; done

networks:
  internal-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
